/*
 * Generated by Bluespec Compiler, version 2014.06.A (build 33987, 2014-06-24)
 * 
 * On Wed Nov 26 13:26:23 EST 2014
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkRFile_h__
#define __mkRFile_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkRFile module */
class MOD_mkRFile : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt32> INST_rfile_0_m_ehrReg;
  MOD_Wire<tUInt32> INST_rfile_0_m_ignored_wires_0;
  MOD_Wire<tUInt32> INST_rfile_0_m_ignored_wires_1;
  MOD_Reg<tUInt8> INST_rfile_0_m_virtual_reg_0;
  MOD_Reg<tUInt8> INST_rfile_0_m_virtual_reg_1;
  MOD_Wire<tUInt32> INST_rfile_0_m_wires_0;
  MOD_Wire<tUInt32> INST_rfile_0_m_wires_1;
  MOD_Reg<tUInt32> INST_rfile_1_m_ehrReg;
  MOD_Wire<tUInt32> INST_rfile_1_m_ignored_wires_0;
  MOD_Wire<tUInt32> INST_rfile_1_m_ignored_wires_1;
  MOD_Reg<tUInt8> INST_rfile_1_m_virtual_reg_0;
  MOD_Reg<tUInt8> INST_rfile_1_m_virtual_reg_1;
  MOD_Wire<tUInt32> INST_rfile_1_m_wires_0;
  MOD_Wire<tUInt32> INST_rfile_1_m_wires_1;
  MOD_Reg<tUInt32> INST_rfile_2_m_ehrReg;
  MOD_Wire<tUInt32> INST_rfile_2_m_ignored_wires_0;
  MOD_Wire<tUInt32> INST_rfile_2_m_ignored_wires_1;
  MOD_Reg<tUInt8> INST_rfile_2_m_virtual_reg_0;
  MOD_Reg<tUInt8> INST_rfile_2_m_virtual_reg_1;
  MOD_Wire<tUInt32> INST_rfile_2_m_wires_0;
  MOD_Wire<tUInt32> INST_rfile_2_m_wires_1;
  MOD_Reg<tUInt32> INST_rfile_3_m_ehrReg;
  MOD_Wire<tUInt32> INST_rfile_3_m_ignored_wires_0;
  MOD_Wire<tUInt32> INST_rfile_3_m_ignored_wires_1;
  MOD_Reg<tUInt8> INST_rfile_3_m_virtual_reg_0;
  MOD_Reg<tUInt8> INST_rfile_3_m_virtual_reg_1;
  MOD_Wire<tUInt32> INST_rfile_3_m_wires_0;
  MOD_Wire<tUInt32> INST_rfile_3_m_wires_1;
  MOD_Reg<tUInt32> INST_rfile_4_m_ehrReg;
  MOD_Wire<tUInt32> INST_rfile_4_m_ignored_wires_0;
  MOD_Wire<tUInt32> INST_rfile_4_m_ignored_wires_1;
  MOD_Reg<tUInt8> INST_rfile_4_m_virtual_reg_0;
  MOD_Reg<tUInt8> INST_rfile_4_m_virtual_reg_1;
  MOD_Wire<tUInt32> INST_rfile_4_m_wires_0;
  MOD_Wire<tUInt32> INST_rfile_4_m_wires_1;
  MOD_Reg<tUInt32> INST_rfile_5_m_ehrReg;
  MOD_Wire<tUInt32> INST_rfile_5_m_ignored_wires_0;
  MOD_Wire<tUInt32> INST_rfile_5_m_ignored_wires_1;
  MOD_Reg<tUInt8> INST_rfile_5_m_virtual_reg_0;
  MOD_Reg<tUInt8> INST_rfile_5_m_virtual_reg_1;
  MOD_Wire<tUInt32> INST_rfile_5_m_wires_0;
  MOD_Wire<tUInt32> INST_rfile_5_m_wires_1;
  MOD_Reg<tUInt32> INST_rfile_6_m_ehrReg;
  MOD_Wire<tUInt32> INST_rfile_6_m_ignored_wires_0;
  MOD_Wire<tUInt32> INST_rfile_6_m_ignored_wires_1;
  MOD_Reg<tUInt8> INST_rfile_6_m_virtual_reg_0;
  MOD_Reg<tUInt8> INST_rfile_6_m_virtual_reg_1;
  MOD_Wire<tUInt32> INST_rfile_6_m_wires_0;
  MOD_Wire<tUInt32> INST_rfile_6_m_wires_1;
  MOD_Reg<tUInt32> INST_rfile_7_m_ehrReg;
  MOD_Wire<tUInt32> INST_rfile_7_m_ignored_wires_0;
  MOD_Wire<tUInt32> INST_rfile_7_m_ignored_wires_1;
  MOD_Reg<tUInt8> INST_rfile_7_m_virtual_reg_0;
  MOD_Reg<tUInt8> INST_rfile_7_m_virtual_reg_1;
  MOD_Wire<tUInt32> INST_rfile_7_m_wires_0;
  MOD_Wire<tUInt32> INST_rfile_7_m_wires_1;
 
 /* Constructor */
 public:
  MOD_mkRFile(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_wr1;
  tUInt8 PORT_EN_wr2;
  tUInt8 PORT_rd1_r;
  tUInt8 PORT_rd2_r;
  tUInt8 PORT_rd3_r;
  tUInt8 PORT_wr1_r;
  tUInt32 PORT_wr1_data;
  tUInt8 PORT_wr2_r;
  tUInt32 PORT_wr2_data;
  tUInt8 PORT_rd1Byte_r;
  tUInt8 PORT_rd1Word_r;
  tUInt8 PORT_rd2Byte_r;
  tUInt8 PORT_rd2Word_r;
  tUInt8 PORT_rd3Byte_r;
  tUInt8 PORT_rd3Word_r;
  tUInt32 PORT_rd1;
  tUInt8 PORT_RDY_rd1;
  tUInt32 PORT_rd2;
  tUInt8 PORT_RDY_rd2;
  tUInt32 PORT_rd3;
  tUInt8 PORT_RDY_rd3;
  tUInt8 PORT_RDY_wr1;
  tUInt8 PORT_RDY_wr2;
  tUInt8 PORT_rd1Byte;
  tUInt8 PORT_RDY_rd1Byte;
  tUInt32 PORT_rd1Word;
  tUInt8 PORT_RDY_rd1Word;
  tUInt8 PORT_rd2Byte;
  tUInt8 PORT_RDY_rd2Byte;
  tUInt32 PORT_rd2Word;
  tUInt8 PORT_RDY_rd2Word;
  tUInt8 PORT_rd3Byte;
  tUInt8 PORT_RDY_rd3Byte;
  tUInt32 PORT_rd3Word;
  tUInt8 PORT_RDY_rd3Word;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_CAN_FIRE_rd3;
  tUInt8 DEF_CAN_FIRE_rd2;
  tUInt8 DEF_CAN_FIRE_rd1;
  tUInt8 DEF_WILL_FIRE_wr2;
  tUInt8 DEF_WILL_FIRE_wr1;
  tUInt8 DEF_WILL_FIRE_RL_rfile_7_m_canonicalize;
  tUInt8 DEF_CAN_FIRE_RL_rfile_7_m_canonicalize;
  tUInt8 DEF_WILL_FIRE_RL_rfile_6_m_canonicalize;
  tUInt8 DEF_CAN_FIRE_RL_rfile_6_m_canonicalize;
  tUInt8 DEF_WILL_FIRE_RL_rfile_5_m_canonicalize;
  tUInt8 DEF_CAN_FIRE_RL_rfile_5_m_canonicalize;
  tUInt8 DEF_WILL_FIRE_RL_rfile_4_m_canonicalize;
  tUInt8 DEF_CAN_FIRE_RL_rfile_4_m_canonicalize;
  tUInt8 DEF_WILL_FIRE_RL_rfile_3_m_canonicalize;
  tUInt8 DEF_CAN_FIRE_RL_rfile_3_m_canonicalize;
  tUInt8 DEF_WILL_FIRE_RL_rfile_2_m_canonicalize;
  tUInt8 DEF_CAN_FIRE_RL_rfile_2_m_canonicalize;
  tUInt8 DEF_WILL_FIRE_RL_rfile_1_m_canonicalize;
  tUInt8 DEF_CAN_FIRE_RL_rfile_1_m_canonicalize;
  tUInt8 DEF_WILL_FIRE_RL_rfile_0_m_canonicalize;
  tUInt8 DEF_CAN_FIRE_RL_rfile_0_m_canonicalize;
  tUInt8 DEF_CAN_FIRE_rd3Word;
  tUInt8 DEF_CAN_FIRE_rd3Byte;
  tUInt8 DEF_CAN_FIRE_rd2Word;
  tUInt8 DEF_CAN_FIRE_rd2Byte;
  tUInt8 DEF_CAN_FIRE_rd1Word;
  tUInt8 DEF_CAN_FIRE_rd1Byte;
  tUInt8 DEF_CAN_FIRE_wr2;
  tUInt8 DEF_CAN_FIRE_wr1;
 
 /* Local definitions */
 private:
  tUInt8 DEF_rfile_0_m_virtual_reg_1_read____d64;
  tUInt32 DEF_IF_rfile_0_m_wires_0_whas_THEN_rfile_0_m_wires_ETC___d6;
  tUInt32 DEF_IF_rfile_1_m_wires_0_whas__0_THEN_rfile_1_m_wi_ETC___d13;
  tUInt32 DEF_IF_rfile_2_m_wires_0_whas__7_THEN_rfile_2_m_wi_ETC___d20;
  tUInt32 DEF_IF_rfile_3_m_wires_0_whas__4_THEN_rfile_3_m_wi_ETC___d27;
  tUInt32 DEF_IF_rfile_4_m_wires_0_whas__1_THEN_rfile_4_m_wi_ETC___d34;
  tUInt32 DEF_IF_rfile_5_m_wires_0_whas__8_THEN_rfile_5_m_wi_ETC___d41;
  tUInt32 DEF_IF_rfile_6_m_wires_0_whas__5_THEN_rfile_6_m_wi_ETC___d48;
  tUInt32 DEF_IF_rfile_7_m_wires_0_whas__2_THEN_rfile_7_m_wi_ETC___d55;
  tUInt32 DEF_def__h15238;
  tUInt32 DEF_def__h15333;
  tUInt32 DEF_def__h15428;
  tUInt32 DEF_def__h15523;
  tUInt32 DEF_def__h15618;
  tUInt32 DEF_def__h15713;
  tUInt32 DEF_def__h15808;
  tUInt32 DEF_def__h15903;
  tUInt8 DEF_rfile_7_m_virtual_reg_1_read____d92;
  tUInt8 DEF_rfile_6_m_virtual_reg_1_read____d88;
  tUInt8 DEF_rfile_5_m_virtual_reg_1_read____d84;
  tUInt8 DEF_rfile_4_m_virtual_reg_1_read____d80;
  tUInt8 DEF_rfile_3_m_virtual_reg_1_read____d76;
  tUInt8 DEF_rfile_2_m_virtual_reg_1_read____d72;
  tUInt8 DEF_rfile_1_m_virtual_reg_1_read____d68;
  tUInt32 DEF_n__read__h8072;
  tUInt32 DEF_n__read__h8070;
  tUInt32 DEF_n__read__h8068;
  tUInt32 DEF_n__read__h8066;
  tUInt32 DEF_n__read__h8064;
  tUInt32 DEF_n__read__h8062;
  tUInt32 DEF_n__read__h8060;
  tUInt32 DEF_n__read__h8058;
 
 /* Rules */
 public:
  void RL_rfile_0_m_canonicalize();
  void RL_rfile_1_m_canonicalize();
  void RL_rfile_2_m_canonicalize();
  void RL_rfile_3_m_canonicalize();
  void RL_rfile_4_m_canonicalize();
  void RL_rfile_5_m_canonicalize();
  void RL_rfile_6_m_canonicalize();
  void RL_rfile_7_m_canonicalize();
 
 /* Methods */
 public:
  void METH_wr1(tUInt8 ARG_wr1_r, tUInt32 ARG_wr1_data);
  tUInt8 METH_RDY_wr1();
  void METH_wr2(tUInt8 ARG_wr2_r, tUInt32 ARG_wr2_data);
  tUInt8 METH_RDY_wr2();
  tUInt8 METH_rd1Byte(tUInt8 ARG_rd1Byte_r);
  tUInt8 METH_RDY_rd1Byte();
  tUInt32 METH_rd1Word(tUInt8 ARG_rd1Word_r);
  tUInt8 METH_RDY_rd1Word();
  tUInt32 METH_rd1(tUInt8 ARG_rd1_r);
  tUInt8 METH_RDY_rd1();
  tUInt8 METH_rd2Byte(tUInt8 ARG_rd2Byte_r);
  tUInt8 METH_RDY_rd2Byte();
  tUInt32 METH_rd2Word(tUInt8 ARG_rd2Word_r);
  tUInt8 METH_RDY_rd2Word();
  tUInt32 METH_rd2(tUInt8 ARG_rd2_r);
  tUInt8 METH_RDY_rd2();
  tUInt8 METH_rd3Byte(tUInt8 ARG_rd3Byte_r);
  tUInt8 METH_RDY_rd3Byte();
  tUInt32 METH_rd3Word(tUInt8 ARG_rd3Word_r);
  tUInt8 METH_RDY_rd3Word();
  tUInt32 METH_rd3(tUInt8 ARG_rd3_r);
  tUInt8 METH_RDY_rd3();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkRFile &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkRFile &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkRFile &backing);
};

#endif /* ifndef __mkRFile_h__ */
