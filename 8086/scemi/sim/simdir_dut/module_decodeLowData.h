/*
 * Generated by Bluespec Compiler, version 2014.06.A (build 33987, 2014-06-24)
 * 
 * On Tue Nov 25 02:07:28 EST 2014
 * 
 */

/* Generation options: keep-fires */
#ifndef __module_decodeLowData_h__
#define __module_decodeLowData_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the module_decodeLowData module */
class MOD_module_decodeLowData : public Module {
 
 /* Clock handles */
 private:
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
 
 /* Constructor */
 public:
  MOD_module_decodeLowData(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
 
 /* Port definitions */
 public:
  tUWide PORT_decodeLowData_pdInst;
  tUInt8 PORT_decodeLowData_lowData;
  tUWide PORT_decodeLowData;
  tUInt8 PORT_RDY_decodeLowData;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_CAN_FIRE_decodeLowData;
 
 /* Local definitions */
 private:
  tUWide DEF_decodeLowData_pdInst_BITS_72_TO_0___d25;
  tUWide DEF_decodeLowData_pdInst_BIT_128_CONCAT_IF_decodeL_ETC___d28;
  tUWide DEF__0_CONCAT_DONTCARE_CONCAT_decodeLowData_lowData_ETC___d27;
  tUWide DEF_decodeLowData_pdInst_BIT_82_8_CONCAT_IF_decode_ETC___d26;
 
 /* Rules */
 public:
 
 /* Methods */
 public:
  tUWide METH_decodeLowData(tUWide ARG_decodeLowData_pdInst, tUInt8 ARG_decodeLowData_lowData);
  tUInt8 METH_RDY_decodeLowData();
 
 /* Reset routines */
 public:
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_module_decodeLowData &backing);
  void vcd_defs(tVCDDumpType dt, MOD_module_decodeLowData &backing);
};

#endif /* ifndef __module_decodeLowData_h__ */
