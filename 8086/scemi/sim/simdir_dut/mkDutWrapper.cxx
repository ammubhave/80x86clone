/*
 * Generated by Bluespec Compiler, version 2014.06.A (build 33987, 2014-06-24)
 * 
 * On Tue Nov 25 02:07:28 EST 2014
 * 
 */
#include "bluesim_primitives.h"
#include "mkDutWrapper.h"


/* Constructor */
MOD_mkDutWrapper::MOD_mkDutWrapper(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_m(simHdl, "m", this),
    PORT_RST_N((tUInt8)1u),
    DEF_iMemInit_request_put_BIT_64_CONCAT_IF_iMemInit_ETC___d4(65u),
    DEF_dMemInit_request_put_BIT_64_CONCAT_IF_dMemInit_ETC___d8(65u)
{
  PORT_EN_cpuToHost = false;
  PORT_EN_hostToCpu = false;
  PORT_EN_iMemInit_request_put = false;
  PORT_EN_dMemInit_request_put = false;
  PORT_hostToCpu_startpc = 0u;
  PORT_iMemInit_request_put.setSize(65u);
  PORT_iMemInit_request_put.clear();
  PORT_dMemInit_request_put.setSize(65u);
  PORT_dMemInit_request_put.clear();
  PORT_cpuToHost = 0llu;
  PORT_RDY_cpuToHost = false;
  PORT_RDY_hostToCpu = false;
  PORT_RDY_iMemInit_request_put = false;
  PORT_iMemInit_done = false;
  PORT_RDY_iMemInit_done = false;
  PORT_RDY_dMemInit_request_put = false;
  PORT_dMemInit_done = false;
  PORT_RDY_dMemInit_done = false;
  symbol_count = 27u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkDutWrapper::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_cpuToHost", SYM_DEF, &DEF_CAN_FIRE_cpuToHost, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_dMemInit_done", SYM_DEF, &DEF_CAN_FIRE_dMemInit_done, 1u);
  init_symbol(&symbols[2u],
	      "CAN_FIRE_dMemInit_request_put",
	      SYM_DEF,
	      &DEF_CAN_FIRE_dMemInit_request_put,
	      1u);
  init_symbol(&symbols[3u], "CAN_FIRE_hostToCpu", SYM_DEF, &DEF_CAN_FIRE_hostToCpu, 1u);
  init_symbol(&symbols[4u], "CAN_FIRE_iMemInit_done", SYM_DEF, &DEF_CAN_FIRE_iMemInit_done, 1u);
  init_symbol(&symbols[5u],
	      "CAN_FIRE_iMemInit_request_put",
	      SYM_DEF,
	      &DEF_CAN_FIRE_iMemInit_request_put,
	      1u);
  init_symbol(&symbols[6u], "cpuToHost", SYM_PORT, &PORT_cpuToHost, 37u);
  init_symbol(&symbols[7u], "dMemInit_done", SYM_PORT, &PORT_dMemInit_done, 1u);
  init_symbol(&symbols[8u], "dMemInit_request_put", SYM_PORT, &PORT_dMemInit_request_put, 65u);
  init_symbol(&symbols[9u], "EN_cpuToHost", SYM_PORT, &PORT_EN_cpuToHost, 1u);
  init_symbol(&symbols[10u], "EN_dMemInit_request_put", SYM_PORT, &PORT_EN_dMemInit_request_put, 1u);
  init_symbol(&symbols[11u], "EN_hostToCpu", SYM_PORT, &PORT_EN_hostToCpu, 1u);
  init_symbol(&symbols[12u], "EN_iMemInit_request_put", SYM_PORT, &PORT_EN_iMemInit_request_put, 1u);
  init_symbol(&symbols[13u], "hostToCpu_startpc", SYM_PORT, &PORT_hostToCpu_startpc, 32u);
  init_symbol(&symbols[14u], "iMemInit_done", SYM_PORT, &PORT_iMemInit_done, 1u);
  init_symbol(&symbols[15u], "iMemInit_request_put", SYM_PORT, &PORT_iMemInit_request_put, 65u);
  init_symbol(&symbols[16u], "m", SYM_MODULE, &INST_m);
  init_symbol(&symbols[17u], "RDY_cpuToHost", SYM_PORT, &PORT_RDY_cpuToHost, 1u);
  init_symbol(&symbols[18u], "RDY_dMemInit_done", SYM_PORT, &PORT_RDY_dMemInit_done, 1u);
  init_symbol(&symbols[19u],
	      "RDY_dMemInit_request_put",
	      SYM_PORT,
	      &PORT_RDY_dMemInit_request_put,
	      1u);
  init_symbol(&symbols[20u], "RDY_hostToCpu", SYM_PORT, &PORT_RDY_hostToCpu, 1u);
  init_symbol(&symbols[21u], "RDY_iMemInit_done", SYM_PORT, &PORT_RDY_iMemInit_done, 1u);
  init_symbol(&symbols[22u],
	      "RDY_iMemInit_request_put",
	      SYM_PORT,
	      &PORT_RDY_iMemInit_request_put,
	      1u);
  init_symbol(&symbols[23u], "WILL_FIRE_cpuToHost", SYM_DEF, &DEF_WILL_FIRE_cpuToHost, 1u);
  init_symbol(&symbols[24u],
	      "WILL_FIRE_dMemInit_request_put",
	      SYM_DEF,
	      &DEF_WILL_FIRE_dMemInit_request_put,
	      1u);
  init_symbol(&symbols[25u], "WILL_FIRE_hostToCpu", SYM_DEF, &DEF_WILL_FIRE_hostToCpu, 1u);
  init_symbol(&symbols[26u],
	      "WILL_FIRE_iMemInit_request_put",
	      SYM_DEF,
	      &DEF_WILL_FIRE_iMemInit_request_put,
	      1u);
}


/* Rule actions */


/* Methods */

tUInt64 MOD_mkDutWrapper::METH_cpuToHost()
{
  PORT_EN_cpuToHost = (tUInt8)1u;
  DEF_WILL_FIRE_cpuToHost = (tUInt8)1u;
  tUInt64 DEF_AVMeth_m_cpuToHost;
  DEF_AVMeth_m_cpuToHost = INST_m.METH_cpuToHost();
  PORT_cpuToHost = DEF_AVMeth_m_cpuToHost;
  return PORT_cpuToHost;
}

tUInt8 MOD_mkDutWrapper::METH_RDY_cpuToHost()
{
  DEF_CAN_FIRE_cpuToHost = INST_m.METH_RDY_cpuToHost();
  PORT_RDY_cpuToHost = DEF_CAN_FIRE_cpuToHost;
  return PORT_RDY_cpuToHost;
}

void MOD_mkDutWrapper::METH_hostToCpu(tUInt32 ARG_hostToCpu_startpc)
{
  PORT_EN_hostToCpu = (tUInt8)1u;
  DEF_WILL_FIRE_hostToCpu = (tUInt8)1u;
  PORT_hostToCpu_startpc = ARG_hostToCpu_startpc;
  INST_m.METH_hostToCpu(ARG_hostToCpu_startpc);
}

tUInt8 MOD_mkDutWrapper::METH_RDY_hostToCpu()
{
  DEF_CAN_FIRE_hostToCpu = INST_m.METH_RDY_hostToCpu();
  PORT_RDY_hostToCpu = DEF_CAN_FIRE_hostToCpu;
  return PORT_RDY_hostToCpu;
}

void MOD_mkDutWrapper::METH_iMemInit_request_put(tUWide ARG_iMemInit_request_put)
{
  tUInt8 DEF_iMemInit_request_put_BIT_64___d1;
  tUInt64 DEF_iMemInit_request_put_BITS_63_TO_0___d2;
  PORT_EN_iMemInit_request_put = (tUInt8)1u;
  DEF_WILL_FIRE_iMemInit_request_put = (tUInt8)1u;
  PORT_iMemInit_request_put = ARG_iMemInit_request_put;
  DEF_iMemInit_request_put_BITS_63_TO_0___d2 = primExtract64(64u,
							     65u,
							     ARG_iMemInit_request_put,
							     32u,
							     63u,
							     32u,
							     0u);
  DEF_iMemInit_request_put_BIT_64___d1 = ARG_iMemInit_request_put.get_bits_in_word8(2u, 0u, 1u);
  DEF_iMemInit_request_put_BIT_64_CONCAT_IF_iMemInit_ETC___d4.build_concat(8589934591llu & ((((tUInt64)(DEF_iMemInit_request_put_BIT_64___d1)) << 32u) | (tUInt64)((tUInt32)((DEF_iMemInit_request_put_BIT_64___d1 ? DEF_iMemInit_request_put_BITS_63_TO_0___d2 : DEF_iMemInit_request_put_BITS_63_TO_0___d2) >> 32u))),
									   32u,
									   33u).set_whole_word((tUInt32)(DEF_iMemInit_request_put_BIT_64___d1 ? DEF_iMemInit_request_put_BITS_63_TO_0___d2 : DEF_iMemInit_request_put_BITS_63_TO_0___d2),
											       0u);
  INST_m.METH_iMemInit_request_put(DEF_iMemInit_request_put_BIT_64_CONCAT_IF_iMemInit_ETC___d4);
}

tUInt8 MOD_mkDutWrapper::METH_RDY_iMemInit_request_put()
{
  DEF_CAN_FIRE_iMemInit_request_put = INST_m.METH_RDY_iMemInit_request_put();
  PORT_RDY_iMemInit_request_put = DEF_CAN_FIRE_iMemInit_request_put;
  return PORT_RDY_iMemInit_request_put;
}

tUInt8 MOD_mkDutWrapper::METH_iMemInit_done()
{
  PORT_iMemInit_done = INST_m.METH_iMemInit_done();
  return PORT_iMemInit_done;
}

tUInt8 MOD_mkDutWrapper::METH_RDY_iMemInit_done()
{
  DEF_CAN_FIRE_iMemInit_done = (tUInt8)1u;
  PORT_RDY_iMemInit_done = DEF_CAN_FIRE_iMemInit_done;
  return PORT_RDY_iMemInit_done;
}

void MOD_mkDutWrapper::METH_dMemInit_request_put(tUWide ARG_dMemInit_request_put)
{
  tUInt8 DEF_dMemInit_request_put_BIT_64___d5;
  tUInt64 DEF_dMemInit_request_put_BITS_63_TO_0___d6;
  PORT_EN_dMemInit_request_put = (tUInt8)1u;
  DEF_WILL_FIRE_dMemInit_request_put = (tUInt8)1u;
  PORT_dMemInit_request_put = ARG_dMemInit_request_put;
  DEF_dMemInit_request_put_BITS_63_TO_0___d6 = primExtract64(64u,
							     65u,
							     ARG_dMemInit_request_put,
							     32u,
							     63u,
							     32u,
							     0u);
  DEF_dMemInit_request_put_BIT_64___d5 = ARG_dMemInit_request_put.get_bits_in_word8(2u, 0u, 1u);
  DEF_dMemInit_request_put_BIT_64_CONCAT_IF_dMemInit_ETC___d8.build_concat(8589934591llu & ((((tUInt64)(DEF_dMemInit_request_put_BIT_64___d5)) << 32u) | (tUInt64)((tUInt32)((DEF_dMemInit_request_put_BIT_64___d5 ? DEF_dMemInit_request_put_BITS_63_TO_0___d6 : DEF_dMemInit_request_put_BITS_63_TO_0___d6) >> 32u))),
									   32u,
									   33u).set_whole_word((tUInt32)(DEF_dMemInit_request_put_BIT_64___d5 ? DEF_dMemInit_request_put_BITS_63_TO_0___d6 : DEF_dMemInit_request_put_BITS_63_TO_0___d6),
											       0u);
  INST_m.METH_dMemInit_request_put(DEF_dMemInit_request_put_BIT_64_CONCAT_IF_dMemInit_ETC___d8);
}

tUInt8 MOD_mkDutWrapper::METH_RDY_dMemInit_request_put()
{
  DEF_CAN_FIRE_dMemInit_request_put = INST_m.METH_RDY_dMemInit_request_put();
  PORT_RDY_dMemInit_request_put = DEF_CAN_FIRE_dMemInit_request_put;
  return PORT_RDY_dMemInit_request_put;
}

tUInt8 MOD_mkDutWrapper::METH_dMemInit_done()
{
  PORT_dMemInit_done = INST_m.METH_dMemInit_done();
  return PORT_dMemInit_done;
}

tUInt8 MOD_mkDutWrapper::METH_RDY_dMemInit_done()
{
  DEF_CAN_FIRE_dMemInit_done = (tUInt8)1u;
  PORT_RDY_dMemInit_done = DEF_CAN_FIRE_dMemInit_done;
  return PORT_RDY_dMemInit_done;
}


/* Reset routines */

void MOD_mkDutWrapper::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_m.reset_RST_N(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkDutWrapper::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkDutWrapper::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_m.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkDutWrapper::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 29u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_cpuToHost", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_dMemInit_done", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_dMemInit_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_hostToCpu", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_iMemInit_done", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_iMemInit_request_put", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_cpuToHost", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_dMemInit_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_hostToCpu", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_iMemInit_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dMemInit_request_put_BIT_64_CONCAT_IF_dMemInit_ETC___d8", 65u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "iMemInit_request_put_BIT_64_CONCAT_IF_iMemInit_ETC___d4", 65u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_cpuToHost", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_dMemInit_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_hostToCpu", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_iMemInit_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_cpuToHost", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_dMemInit_done", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_dMemInit_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_hostToCpu", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_iMemInit_done", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_iMemInit_request_put", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "cpuToHost", 37u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dMemInit_done", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "dMemInit_request_put", 65u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "hostToCpu_startpc", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "iMemInit_done", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "iMemInit_request_put", 65u);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_m.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkDutWrapper::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkDutWrapper &backing)
{
  vcd_defs(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkDutWrapper::vcd_defs(tVCDDumpType dt, MOD_mkDutWrapper &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 65u);
    vcd_write_x(sim_hdl, num++, 65u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 37u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 65u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 65u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_cpuToHost) != DEF_CAN_FIRE_cpuToHost)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_cpuToHost, 1u);
	backing.DEF_CAN_FIRE_cpuToHost = DEF_CAN_FIRE_cpuToHost;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_dMemInit_done) != DEF_CAN_FIRE_dMemInit_done)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_dMemInit_done, 1u);
	backing.DEF_CAN_FIRE_dMemInit_done = DEF_CAN_FIRE_dMemInit_done;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_dMemInit_request_put) != DEF_CAN_FIRE_dMemInit_request_put)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_dMemInit_request_put, 1u);
	backing.DEF_CAN_FIRE_dMemInit_request_put = DEF_CAN_FIRE_dMemInit_request_put;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_hostToCpu) != DEF_CAN_FIRE_hostToCpu)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_hostToCpu, 1u);
	backing.DEF_CAN_FIRE_hostToCpu = DEF_CAN_FIRE_hostToCpu;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_iMemInit_done) != DEF_CAN_FIRE_iMemInit_done)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_iMemInit_done, 1u);
	backing.DEF_CAN_FIRE_iMemInit_done = DEF_CAN_FIRE_iMemInit_done;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_iMemInit_request_put) != DEF_CAN_FIRE_iMemInit_request_put)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_iMemInit_request_put, 1u);
	backing.DEF_CAN_FIRE_iMemInit_request_put = DEF_CAN_FIRE_iMemInit_request_put;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_cpuToHost) != DEF_WILL_FIRE_cpuToHost)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_cpuToHost, 1u);
	backing.DEF_WILL_FIRE_cpuToHost = DEF_WILL_FIRE_cpuToHost;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_dMemInit_request_put) != DEF_WILL_FIRE_dMemInit_request_put)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_dMemInit_request_put, 1u);
	backing.DEF_WILL_FIRE_dMemInit_request_put = DEF_WILL_FIRE_dMemInit_request_put;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_hostToCpu) != DEF_WILL_FIRE_hostToCpu)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_hostToCpu, 1u);
	backing.DEF_WILL_FIRE_hostToCpu = DEF_WILL_FIRE_hostToCpu;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_iMemInit_request_put) != DEF_WILL_FIRE_iMemInit_request_put)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_iMemInit_request_put, 1u);
	backing.DEF_WILL_FIRE_iMemInit_request_put = DEF_WILL_FIRE_iMemInit_request_put;
      }
      ++num;
      if ((backing.DEF_dMemInit_request_put_BIT_64_CONCAT_IF_dMemInit_ETC___d8) != DEF_dMemInit_request_put_BIT_64_CONCAT_IF_dMemInit_ETC___d8)
      {
	vcd_write_val(sim_hdl, num, DEF_dMemInit_request_put_BIT_64_CONCAT_IF_dMemInit_ETC___d8, 65u);
	backing.DEF_dMemInit_request_put_BIT_64_CONCAT_IF_dMemInit_ETC___d8 = DEF_dMemInit_request_put_BIT_64_CONCAT_IF_dMemInit_ETC___d8;
      }
      ++num;
      if ((backing.DEF_iMemInit_request_put_BIT_64_CONCAT_IF_iMemInit_ETC___d4) != DEF_iMemInit_request_put_BIT_64_CONCAT_IF_iMemInit_ETC___d4)
      {
	vcd_write_val(sim_hdl, num, DEF_iMemInit_request_put_BIT_64_CONCAT_IF_iMemInit_ETC___d4, 65u);
	backing.DEF_iMemInit_request_put_BIT_64_CONCAT_IF_iMemInit_ETC___d4 = DEF_iMemInit_request_put_BIT_64_CONCAT_IF_iMemInit_ETC___d4;
      }
      ++num;
      if ((backing.PORT_EN_cpuToHost) != PORT_EN_cpuToHost)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_cpuToHost, 1u);
	backing.PORT_EN_cpuToHost = PORT_EN_cpuToHost;
      }
      ++num;
      if ((backing.PORT_EN_dMemInit_request_put) != PORT_EN_dMemInit_request_put)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_dMemInit_request_put, 1u);
	backing.PORT_EN_dMemInit_request_put = PORT_EN_dMemInit_request_put;
      }
      ++num;
      if ((backing.PORT_EN_hostToCpu) != PORT_EN_hostToCpu)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_hostToCpu, 1u);
	backing.PORT_EN_hostToCpu = PORT_EN_hostToCpu;
      }
      ++num;
      if ((backing.PORT_EN_iMemInit_request_put) != PORT_EN_iMemInit_request_put)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_iMemInit_request_put, 1u);
	backing.PORT_EN_iMemInit_request_put = PORT_EN_iMemInit_request_put;
      }
      ++num;
      if ((backing.PORT_RDY_cpuToHost) != PORT_RDY_cpuToHost)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_cpuToHost, 1u);
	backing.PORT_RDY_cpuToHost = PORT_RDY_cpuToHost;
      }
      ++num;
      if ((backing.PORT_RDY_dMemInit_done) != PORT_RDY_dMemInit_done)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_dMemInit_done, 1u);
	backing.PORT_RDY_dMemInit_done = PORT_RDY_dMemInit_done;
      }
      ++num;
      if ((backing.PORT_RDY_dMemInit_request_put) != PORT_RDY_dMemInit_request_put)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_dMemInit_request_put, 1u);
	backing.PORT_RDY_dMemInit_request_put = PORT_RDY_dMemInit_request_put;
      }
      ++num;
      if ((backing.PORT_RDY_hostToCpu) != PORT_RDY_hostToCpu)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_hostToCpu, 1u);
	backing.PORT_RDY_hostToCpu = PORT_RDY_hostToCpu;
      }
      ++num;
      if ((backing.PORT_RDY_iMemInit_done) != PORT_RDY_iMemInit_done)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_iMemInit_done, 1u);
	backing.PORT_RDY_iMemInit_done = PORT_RDY_iMemInit_done;
      }
      ++num;
      if ((backing.PORT_RDY_iMemInit_request_put) != PORT_RDY_iMemInit_request_put)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_iMemInit_request_put, 1u);
	backing.PORT_RDY_iMemInit_request_put = PORT_RDY_iMemInit_request_put;
      }
      ++num;
      if ((backing.PORT_cpuToHost) != PORT_cpuToHost)
      {
	vcd_write_val(sim_hdl, num, PORT_cpuToHost, 37u);
	backing.PORT_cpuToHost = PORT_cpuToHost;
      }
      ++num;
      if ((backing.PORT_dMemInit_done) != PORT_dMemInit_done)
      {
	vcd_write_val(sim_hdl, num, PORT_dMemInit_done, 1u);
	backing.PORT_dMemInit_done = PORT_dMemInit_done;
      }
      ++num;
      if ((backing.PORT_dMemInit_request_put) != PORT_dMemInit_request_put)
      {
	vcd_write_val(sim_hdl, num, PORT_dMemInit_request_put, 65u);
	backing.PORT_dMemInit_request_put = PORT_dMemInit_request_put;
      }
      ++num;
      if ((backing.PORT_hostToCpu_startpc) != PORT_hostToCpu_startpc)
      {
	vcd_write_val(sim_hdl, num, PORT_hostToCpu_startpc, 32u);
	backing.PORT_hostToCpu_startpc = PORT_hostToCpu_startpc;
      }
      ++num;
      if ((backing.PORT_iMemInit_done) != PORT_iMemInit_done)
      {
	vcd_write_val(sim_hdl, num, PORT_iMemInit_done, 1u);
	backing.PORT_iMemInit_done = PORT_iMemInit_done;
      }
      ++num;
      if ((backing.PORT_iMemInit_request_put) != PORT_iMemInit_request_put)
      {
	vcd_write_val(sim_hdl, num, PORT_iMemInit_request_put, 65u);
	backing.PORT_iMemInit_request_put = PORT_iMemInit_request_put;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_cpuToHost, 1u);
      backing.DEF_CAN_FIRE_cpuToHost = DEF_CAN_FIRE_cpuToHost;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_dMemInit_done, 1u);
      backing.DEF_CAN_FIRE_dMemInit_done = DEF_CAN_FIRE_dMemInit_done;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_dMemInit_request_put, 1u);
      backing.DEF_CAN_FIRE_dMemInit_request_put = DEF_CAN_FIRE_dMemInit_request_put;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_hostToCpu, 1u);
      backing.DEF_CAN_FIRE_hostToCpu = DEF_CAN_FIRE_hostToCpu;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_iMemInit_done, 1u);
      backing.DEF_CAN_FIRE_iMemInit_done = DEF_CAN_FIRE_iMemInit_done;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_iMemInit_request_put, 1u);
      backing.DEF_CAN_FIRE_iMemInit_request_put = DEF_CAN_FIRE_iMemInit_request_put;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_cpuToHost, 1u);
      backing.DEF_WILL_FIRE_cpuToHost = DEF_WILL_FIRE_cpuToHost;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_dMemInit_request_put, 1u);
      backing.DEF_WILL_FIRE_dMemInit_request_put = DEF_WILL_FIRE_dMemInit_request_put;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_hostToCpu, 1u);
      backing.DEF_WILL_FIRE_hostToCpu = DEF_WILL_FIRE_hostToCpu;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_iMemInit_request_put, 1u);
      backing.DEF_WILL_FIRE_iMemInit_request_put = DEF_WILL_FIRE_iMemInit_request_put;
      vcd_write_val(sim_hdl, num++, DEF_dMemInit_request_put_BIT_64_CONCAT_IF_dMemInit_ETC___d8, 65u);
      backing.DEF_dMemInit_request_put_BIT_64_CONCAT_IF_dMemInit_ETC___d8 = DEF_dMemInit_request_put_BIT_64_CONCAT_IF_dMemInit_ETC___d8;
      vcd_write_val(sim_hdl, num++, DEF_iMemInit_request_put_BIT_64_CONCAT_IF_iMemInit_ETC___d4, 65u);
      backing.DEF_iMemInit_request_put_BIT_64_CONCAT_IF_iMemInit_ETC___d4 = DEF_iMemInit_request_put_BIT_64_CONCAT_IF_iMemInit_ETC___d4;
      vcd_write_val(sim_hdl, num++, PORT_EN_cpuToHost, 1u);
      backing.PORT_EN_cpuToHost = PORT_EN_cpuToHost;
      vcd_write_val(sim_hdl, num++, PORT_EN_dMemInit_request_put, 1u);
      backing.PORT_EN_dMemInit_request_put = PORT_EN_dMemInit_request_put;
      vcd_write_val(sim_hdl, num++, PORT_EN_hostToCpu, 1u);
      backing.PORT_EN_hostToCpu = PORT_EN_hostToCpu;
      vcd_write_val(sim_hdl, num++, PORT_EN_iMemInit_request_put, 1u);
      backing.PORT_EN_iMemInit_request_put = PORT_EN_iMemInit_request_put;
      vcd_write_val(sim_hdl, num++, PORT_RDY_cpuToHost, 1u);
      backing.PORT_RDY_cpuToHost = PORT_RDY_cpuToHost;
      vcd_write_val(sim_hdl, num++, PORT_RDY_dMemInit_done, 1u);
      backing.PORT_RDY_dMemInit_done = PORT_RDY_dMemInit_done;
      vcd_write_val(sim_hdl, num++, PORT_RDY_dMemInit_request_put, 1u);
      backing.PORT_RDY_dMemInit_request_put = PORT_RDY_dMemInit_request_put;
      vcd_write_val(sim_hdl, num++, PORT_RDY_hostToCpu, 1u);
      backing.PORT_RDY_hostToCpu = PORT_RDY_hostToCpu;
      vcd_write_val(sim_hdl, num++, PORT_RDY_iMemInit_done, 1u);
      backing.PORT_RDY_iMemInit_done = PORT_RDY_iMemInit_done;
      vcd_write_val(sim_hdl, num++, PORT_RDY_iMemInit_request_put, 1u);
      backing.PORT_RDY_iMemInit_request_put = PORT_RDY_iMemInit_request_put;
      vcd_write_val(sim_hdl, num++, PORT_cpuToHost, 37u);
      backing.PORT_cpuToHost = PORT_cpuToHost;
      vcd_write_val(sim_hdl, num++, PORT_dMemInit_done, 1u);
      backing.PORT_dMemInit_done = PORT_dMemInit_done;
      vcd_write_val(sim_hdl, num++, PORT_dMemInit_request_put, 65u);
      backing.PORT_dMemInit_request_put = PORT_dMemInit_request_put;
      vcd_write_val(sim_hdl, num++, PORT_hostToCpu_startpc, 32u);
      backing.PORT_hostToCpu_startpc = PORT_hostToCpu_startpc;
      vcd_write_val(sim_hdl, num++, PORT_iMemInit_done, 1u);
      backing.PORT_iMemInit_done = PORT_iMemInit_done;
      vcd_write_val(sim_hdl, num++, PORT_iMemInit_request_put, 65u);
      backing.PORT_iMemInit_request_put = PORT_iMemInit_request_put;
    }
}

void MOD_mkDutWrapper::vcd_submodules(tVCDDumpType dt,
				      unsigned int levels,
				      MOD_mkDutWrapper &backing)
{
  INST_m.dump_VCD(dt, levels, backing.INST_m);
}
