/*
 * Generated by Bluespec Compiler, version 2014.06.A (build 33987, 2014-06-24)
 * 
 * On Tue Nov 25 02:07:28 EST 2014
 * 
 */
#include "bluesim_primitives.h"
#include "mkSegRFile.h"


/* Constructor */
MOD_mkSegRFile::MOD_mkSegRFile(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_rfile_0(simHdl, "rfile_0", this, 16u, 0u, (tUInt8)0u),
    INST_rfile_1(simHdl, "rfile_1", this, 16u, 0u, (tUInt8)0u),
    INST_rfile_2(simHdl, "rfile_2", this, 16u, 0u, (tUInt8)0u),
    INST_rfile_3(simHdl, "rfile_3", this, 16u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  PORT_EN_wr = false;
  PORT_wr_r = 0u;
  PORT_wr_data = 0u;
  PORT_rd1_r = 0u;
  PORT_rd2_r = 0u;
  PORT_rd3_r = 0u;
  PORT_RDY_wr = false;
  PORT_rd1 = 0u;
  PORT_RDY_rd1 = false;
  PORT_rd2 = 0u;
  PORT_RDY_rd2 = false;
  PORT_rd3 = 0u;
  PORT_RDY_rd3 = false;
  symbol_count = 22u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkSegRFile::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_rd1", SYM_DEF, &DEF_CAN_FIRE_rd1, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_rd2", SYM_DEF, &DEF_CAN_FIRE_rd2, 1u);
  init_symbol(&symbols[2u], "CAN_FIRE_rd3", SYM_DEF, &DEF_CAN_FIRE_rd3, 1u);
  init_symbol(&symbols[3u], "CAN_FIRE_wr", SYM_DEF, &DEF_CAN_FIRE_wr, 1u);
  init_symbol(&symbols[4u], "EN_wr", SYM_PORT, &PORT_EN_wr, 1u);
  init_symbol(&symbols[5u], "RDY_rd1", SYM_PORT, &PORT_RDY_rd1, 1u);
  init_symbol(&symbols[6u], "RDY_rd2", SYM_PORT, &PORT_RDY_rd2, 1u);
  init_symbol(&symbols[7u], "RDY_rd3", SYM_PORT, &PORT_RDY_rd3, 1u);
  init_symbol(&symbols[8u], "RDY_wr", SYM_PORT, &PORT_RDY_wr, 1u);
  init_symbol(&symbols[9u], "rd1", SYM_PORT, &PORT_rd1, 16u);
  init_symbol(&symbols[10u], "rd1_r", SYM_PORT, &PORT_rd1_r, 2u);
  init_symbol(&symbols[11u], "rd2", SYM_PORT, &PORT_rd2, 16u);
  init_symbol(&symbols[12u], "rd2_r", SYM_PORT, &PORT_rd2_r, 2u);
  init_symbol(&symbols[13u], "rd3", SYM_PORT, &PORT_rd3, 16u);
  init_symbol(&symbols[14u], "rd3_r", SYM_PORT, &PORT_rd3_r, 2u);
  init_symbol(&symbols[15u], "rfile_0", SYM_MODULE, &INST_rfile_0);
  init_symbol(&symbols[16u], "rfile_1", SYM_MODULE, &INST_rfile_1);
  init_symbol(&symbols[17u], "rfile_2", SYM_MODULE, &INST_rfile_2);
  init_symbol(&symbols[18u], "rfile_3", SYM_MODULE, &INST_rfile_3);
  init_symbol(&symbols[19u], "WILL_FIRE_wr", SYM_DEF, &DEF_WILL_FIRE_wr, 1u);
  init_symbol(&symbols[20u], "wr_data", SYM_PORT, &PORT_wr_data, 16u);
  init_symbol(&symbols[21u], "wr_r", SYM_PORT, &PORT_wr_r, 2u);
}


/* Rule actions */


/* Methods */

void MOD_mkSegRFile::METH_wr(tUInt8 ARG_wr_r, tUInt32 ARG_wr_data)
{
  tUInt8 DEF_wr_r_EQ_0___d1;
  tUInt8 DEF_wr_r_EQ_1___d2;
  tUInt8 DEF_wr_r_EQ_2___d3;
  tUInt8 DEF_wr_r_EQ_3___d4;
  PORT_EN_wr = (tUInt8)1u;
  DEF_WILL_FIRE_wr = (tUInt8)1u;
  PORT_wr_r = ARG_wr_r;
  PORT_wr_data = ARG_wr_data;
  DEF_wr_r_EQ_3___d4 = ARG_wr_r == (tUInt8)3u;
  DEF_wr_r_EQ_2___d3 = ARG_wr_r == (tUInt8)2u;
  DEF_wr_r_EQ_1___d2 = ARG_wr_r == (tUInt8)1u;
  DEF_wr_r_EQ_0___d1 = ARG_wr_r == (tUInt8)0u;
  if (DEF_wr_r_EQ_0___d1)
    INST_rfile_0.METH_write(ARG_wr_data);
  if (DEF_wr_r_EQ_1___d2)
    INST_rfile_1.METH_write(ARG_wr_data);
  if (DEF_wr_r_EQ_2___d3)
    INST_rfile_2.METH_write(ARG_wr_data);
  if (DEF_wr_r_EQ_3___d4)
    INST_rfile_3.METH_write(ARG_wr_data);
}

tUInt8 MOD_mkSegRFile::METH_RDY_wr()
{
  DEF_CAN_FIRE_wr = (tUInt8)1u;
  PORT_RDY_wr = DEF_CAN_FIRE_wr;
  return PORT_RDY_wr;
}

tUInt32 MOD_mkSegRFile::METH_rd1(tUInt8 ARG_rd1_r)
{
  PORT_rd1_r = ARG_rd1_r;
  DEF__read__h341 = INST_rfile_3.METH_read();
  DEF__read__h301 = INST_rfile_2.METH_read();
  DEF__read__h261 = INST_rfile_1.METH_read();
  DEF__read__h221 = INST_rfile_0.METH_read();
  switch (ARG_rd1_r) {
  case (tUInt8)0u:
    PORT_rd1 = DEF__read__h221;
    break;
  case (tUInt8)1u:
    PORT_rd1 = DEF__read__h261;
    break;
  case (tUInt8)2u:
    PORT_rd1 = DEF__read__h301;
    break;
  case (tUInt8)3u:
    PORT_rd1 = DEF__read__h341;
    break;
  default:
    PORT_rd1 = 43690u;
  }
  return PORT_rd1;
}

tUInt8 MOD_mkSegRFile::METH_RDY_rd1()
{
  DEF_CAN_FIRE_rd1 = (tUInt8)1u;
  PORT_RDY_rd1 = DEF_CAN_FIRE_rd1;
  return PORT_RDY_rd1;
}

tUInt32 MOD_mkSegRFile::METH_rd2(tUInt8 ARG_rd2_r)
{
  PORT_rd2_r = ARG_rd2_r;
  DEF__read__h341 = INST_rfile_3.METH_read();
  DEF__read__h301 = INST_rfile_2.METH_read();
  DEF__read__h261 = INST_rfile_1.METH_read();
  DEF__read__h221 = INST_rfile_0.METH_read();
  switch (ARG_rd2_r) {
  case (tUInt8)0u:
    PORT_rd2 = DEF__read__h221;
    break;
  case (tUInt8)1u:
    PORT_rd2 = DEF__read__h261;
    break;
  case (tUInt8)2u:
    PORT_rd2 = DEF__read__h301;
    break;
  case (tUInt8)3u:
    PORT_rd2 = DEF__read__h341;
    break;
  default:
    PORT_rd2 = 43690u;
  }
  return PORT_rd2;
}

tUInt8 MOD_mkSegRFile::METH_RDY_rd2()
{
  DEF_CAN_FIRE_rd2 = (tUInt8)1u;
  PORT_RDY_rd2 = DEF_CAN_FIRE_rd2;
  return PORT_RDY_rd2;
}

tUInt32 MOD_mkSegRFile::METH_rd3(tUInt8 ARG_rd3_r)
{
  PORT_rd3_r = ARG_rd3_r;
  DEF__read__h341 = INST_rfile_3.METH_read();
  DEF__read__h301 = INST_rfile_2.METH_read();
  DEF__read__h261 = INST_rfile_1.METH_read();
  DEF__read__h221 = INST_rfile_0.METH_read();
  switch (ARG_rd3_r) {
  case (tUInt8)0u:
    PORT_rd3 = DEF__read__h221;
    break;
  case (tUInt8)1u:
    PORT_rd3 = DEF__read__h261;
    break;
  case (tUInt8)2u:
    PORT_rd3 = DEF__read__h301;
    break;
  case (tUInt8)3u:
    PORT_rd3 = DEF__read__h341;
    break;
  default:
    PORT_rd3 = 43690u;
  }
  return PORT_rd3;
}

tUInt8 MOD_mkSegRFile::METH_RDY_rd3()
{
  DEF_CAN_FIRE_rd3 = (tUInt8)1u;
  PORT_RDY_rd3 = DEF_CAN_FIRE_rd3;
  return PORT_RDY_rd3;
}


/* Reset routines */

void MOD_mkSegRFile::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_rfile_3.reset_RST(ARG_rst_in);
  INST_rfile_2.reset_RST(ARG_rst_in);
  INST_rfile_1.reset_RST(ARG_rst_in);
  INST_rfile_0.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkSegRFile::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkSegRFile::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_rfile_0.dump_state(indent + 2u);
  INST_rfile_1.dump_state(indent + 2u);
  INST_rfile_2.dump_state(indent + 2u);
  INST_rfile_3.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkSegRFile::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 27u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_rd1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_rd2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_rd3", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_wr", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_wr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h221", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h261", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h301", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h341", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_wr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_rd1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_rd2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_rd3", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_wr", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "rd1", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "rd1_r", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "rd2", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "rd2_r", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "rd3", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "rd3_r", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "wr_data", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "wr_r", 2u);
  num = INST_rfile_0.dump_VCD_defs(num);
  num = INST_rfile_1.dump_VCD_defs(num);
  num = INST_rfile_2.dump_VCD_defs(num);
  num = INST_rfile_3.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkSegRFile::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkSegRFile &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkSegRFile::vcd_defs(tVCDDumpType dt, MOD_mkSegRFile &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 2u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_rd1) != DEF_CAN_FIRE_rd1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_rd1, 1u);
	backing.DEF_CAN_FIRE_rd1 = DEF_CAN_FIRE_rd1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_rd2) != DEF_CAN_FIRE_rd2)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_rd2, 1u);
	backing.DEF_CAN_FIRE_rd2 = DEF_CAN_FIRE_rd2;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_rd3) != DEF_CAN_FIRE_rd3)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_rd3, 1u);
	backing.DEF_CAN_FIRE_rd3 = DEF_CAN_FIRE_rd3;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_wr) != DEF_CAN_FIRE_wr)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_wr, 1u);
	backing.DEF_CAN_FIRE_wr = DEF_CAN_FIRE_wr;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_wr) != DEF_WILL_FIRE_wr)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_wr, 1u);
	backing.DEF_WILL_FIRE_wr = DEF_WILL_FIRE_wr;
      }
      ++num;
      if ((backing.DEF__read__h221) != DEF__read__h221)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h221, 16u);
	backing.DEF__read__h221 = DEF__read__h221;
      }
      ++num;
      if ((backing.DEF__read__h261) != DEF__read__h261)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h261, 16u);
	backing.DEF__read__h261 = DEF__read__h261;
      }
      ++num;
      if ((backing.DEF__read__h301) != DEF__read__h301)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h301, 16u);
	backing.DEF__read__h301 = DEF__read__h301;
      }
      ++num;
      if ((backing.DEF__read__h341) != DEF__read__h341)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h341, 16u);
	backing.DEF__read__h341 = DEF__read__h341;
      }
      ++num;
      if ((backing.PORT_EN_wr) != PORT_EN_wr)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_wr, 1u);
	backing.PORT_EN_wr = PORT_EN_wr;
      }
      ++num;
      if ((backing.PORT_RDY_rd1) != PORT_RDY_rd1)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_rd1, 1u);
	backing.PORT_RDY_rd1 = PORT_RDY_rd1;
      }
      ++num;
      if ((backing.PORT_RDY_rd2) != PORT_RDY_rd2)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_rd2, 1u);
	backing.PORT_RDY_rd2 = PORT_RDY_rd2;
      }
      ++num;
      if ((backing.PORT_RDY_rd3) != PORT_RDY_rd3)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_rd3, 1u);
	backing.PORT_RDY_rd3 = PORT_RDY_rd3;
      }
      ++num;
      if ((backing.PORT_RDY_wr) != PORT_RDY_wr)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_wr, 1u);
	backing.PORT_RDY_wr = PORT_RDY_wr;
      }
      ++num;
      if ((backing.PORT_rd1) != PORT_rd1)
      {
	vcd_write_val(sim_hdl, num, PORT_rd1, 16u);
	backing.PORT_rd1 = PORT_rd1;
      }
      ++num;
      if ((backing.PORT_rd1_r) != PORT_rd1_r)
      {
	vcd_write_val(sim_hdl, num, PORT_rd1_r, 2u);
	backing.PORT_rd1_r = PORT_rd1_r;
      }
      ++num;
      if ((backing.PORT_rd2) != PORT_rd2)
      {
	vcd_write_val(sim_hdl, num, PORT_rd2, 16u);
	backing.PORT_rd2 = PORT_rd2;
      }
      ++num;
      if ((backing.PORT_rd2_r) != PORT_rd2_r)
      {
	vcd_write_val(sim_hdl, num, PORT_rd2_r, 2u);
	backing.PORT_rd2_r = PORT_rd2_r;
      }
      ++num;
      if ((backing.PORT_rd3) != PORT_rd3)
      {
	vcd_write_val(sim_hdl, num, PORT_rd3, 16u);
	backing.PORT_rd3 = PORT_rd3;
      }
      ++num;
      if ((backing.PORT_rd3_r) != PORT_rd3_r)
      {
	vcd_write_val(sim_hdl, num, PORT_rd3_r, 2u);
	backing.PORT_rd3_r = PORT_rd3_r;
      }
      ++num;
      if ((backing.PORT_wr_data) != PORT_wr_data)
      {
	vcd_write_val(sim_hdl, num, PORT_wr_data, 16u);
	backing.PORT_wr_data = PORT_wr_data;
      }
      ++num;
      if ((backing.PORT_wr_r) != PORT_wr_r)
      {
	vcd_write_val(sim_hdl, num, PORT_wr_r, 2u);
	backing.PORT_wr_r = PORT_wr_r;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_rd1, 1u);
      backing.DEF_CAN_FIRE_rd1 = DEF_CAN_FIRE_rd1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_rd2, 1u);
      backing.DEF_CAN_FIRE_rd2 = DEF_CAN_FIRE_rd2;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_rd3, 1u);
      backing.DEF_CAN_FIRE_rd3 = DEF_CAN_FIRE_rd3;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_wr, 1u);
      backing.DEF_CAN_FIRE_wr = DEF_CAN_FIRE_wr;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_wr, 1u);
      backing.DEF_WILL_FIRE_wr = DEF_WILL_FIRE_wr;
      vcd_write_val(sim_hdl, num++, DEF__read__h221, 16u);
      backing.DEF__read__h221 = DEF__read__h221;
      vcd_write_val(sim_hdl, num++, DEF__read__h261, 16u);
      backing.DEF__read__h261 = DEF__read__h261;
      vcd_write_val(sim_hdl, num++, DEF__read__h301, 16u);
      backing.DEF__read__h301 = DEF__read__h301;
      vcd_write_val(sim_hdl, num++, DEF__read__h341, 16u);
      backing.DEF__read__h341 = DEF__read__h341;
      vcd_write_val(sim_hdl, num++, PORT_EN_wr, 1u);
      backing.PORT_EN_wr = PORT_EN_wr;
      vcd_write_val(sim_hdl, num++, PORT_RDY_rd1, 1u);
      backing.PORT_RDY_rd1 = PORT_RDY_rd1;
      vcd_write_val(sim_hdl, num++, PORT_RDY_rd2, 1u);
      backing.PORT_RDY_rd2 = PORT_RDY_rd2;
      vcd_write_val(sim_hdl, num++, PORT_RDY_rd3, 1u);
      backing.PORT_RDY_rd3 = PORT_RDY_rd3;
      vcd_write_val(sim_hdl, num++, PORT_RDY_wr, 1u);
      backing.PORT_RDY_wr = PORT_RDY_wr;
      vcd_write_val(sim_hdl, num++, PORT_rd1, 16u);
      backing.PORT_rd1 = PORT_rd1;
      vcd_write_val(sim_hdl, num++, PORT_rd1_r, 2u);
      backing.PORT_rd1_r = PORT_rd1_r;
      vcd_write_val(sim_hdl, num++, PORT_rd2, 16u);
      backing.PORT_rd2 = PORT_rd2;
      vcd_write_val(sim_hdl, num++, PORT_rd2_r, 2u);
      backing.PORT_rd2_r = PORT_rd2_r;
      vcd_write_val(sim_hdl, num++, PORT_rd3, 16u);
      backing.PORT_rd3 = PORT_rd3;
      vcd_write_val(sim_hdl, num++, PORT_rd3_r, 2u);
      backing.PORT_rd3_r = PORT_rd3_r;
      vcd_write_val(sim_hdl, num++, PORT_wr_data, 16u);
      backing.PORT_wr_data = PORT_wr_data;
      vcd_write_val(sim_hdl, num++, PORT_wr_r, 2u);
      backing.PORT_wr_r = PORT_wr_r;
    }
}

void MOD_mkSegRFile::vcd_prims(tVCDDumpType dt, MOD_mkSegRFile &backing)
{
  INST_rfile_0.dump_VCD(dt, backing.INST_rfile_0);
  INST_rfile_1.dump_VCD(dt, backing.INST_rfile_1);
  INST_rfile_2.dump_VCD(dt, backing.INST_rfile_2);
  INST_rfile_3.dump_VCD(dt, backing.INST_rfile_3);
}
