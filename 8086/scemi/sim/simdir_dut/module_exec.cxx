/*
 * Generated by Bluespec Compiler, version 2014.06.A (build 33987, 2014-06-24)
 * 
 * On Tue Nov 25 02:07:28 EST 2014
 * 
 */
#include "bluesim_primitives.h"
#include "module_exec.h"


/* Constructor */
MOD_module_exec::MOD_module_exec(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    DEF__0_CONCAT_DONTCARE_CONCAT_IF_exec_dInst_BITS_16_ETC___d97(93u),
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d96(69u)
{
  PORT_exec_dInst.setSize(173u);
  PORT_exec_dInst.clear();
  PORT_exec_ip = 0u;
  PORT_exec_pc = 0u;
  PORT_exec.setSize(103u);
  PORT_exec.clear();
  PORT_RDY_exec = false;
  symbol_count = 6u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_module_exec::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_exec", SYM_DEF, &DEF_CAN_FIRE_exec, 1u);
  init_symbol(&symbols[1u], "exec", SYM_PORT, &PORT_exec, 103u);
  init_symbol(&symbols[2u], "exec_dInst", SYM_PORT, &PORT_exec_dInst, 173u);
  init_symbol(&symbols[3u], "exec_ip", SYM_PORT, &PORT_exec_ip, 16u);
  init_symbol(&symbols[4u], "exec_pc", SYM_PORT, &PORT_exec_pc, 16u);
  init_symbol(&symbols[5u], "RDY_exec", SYM_PORT, &PORT_RDY_exec, 1u);
}


/* Rule actions */


/* Methods */

tUWide MOD_module_exec::METH_exec(tUWide ARG_exec_dInst, tUInt32 ARG_exec_ip, tUInt32 ARG_exec_pc)
{
  tUInt8 DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d20;
  tUInt32 DEF_y__h1035;
  tUInt32 DEF_x__h1032;
  tUInt8 DEF_y__h1033;
  tUInt32 DEF_x__h1002;
  tUInt32 DEF_y__h955;
  tUInt8 DEF_NOT_exec_dInst_BITS_164_TO_160_EQ_10_0___d14;
  tUInt8 DEF_NOT_exec_dInst_BIT_118_6___d62;
  tUInt8 DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d12;
  tUInt8 DEF_NOT_exec_dInst_BIT_82___d13;
  tUInt8 DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d60;
  tUInt8 DEF_NOT_exec_dInst_BIT_72_5___d61;
  tUInt8 DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d17;
  tUInt8 DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_THEN_exec_d_ETC___d74;
  tUInt8 DEF_exec_dInst_BITS_164_TO_160_EQ_10___d10;
  tUInt32 DEF_x__h1004;
  tUInt32 DEF_offset__h663;
  tUInt32 DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_THEN_exec_d_ETC___d85;
  tUInt8 DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d66;
  tUInt32 DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d91;
  tUInt8 DEF_exec_dInst_BITS_164_TO_160_EQ_6___d21;
  tUInt8 DEF_exec_dInst_BIT_21___d57;
  tUInt8 DEF_exec_dInst_BIT_72___d55;
  tUInt8 DEF_exec_dInst_BIT_82___d9;
  tUInt8 DEF_exec_dInst_BIT_118___d56;
  tUInt8 DEF_exec_dInst_BIT_154___d31;
  tUInt8 DEF_mod__h675;
  tUInt8 DEF_rm__h676;
  tUInt8 DEF_exec_dInst_BITS_81_TO_78___d18;
  tUInt8 DEF_exec_dInst_BITS_164_TO_160___d1;
  tUInt8 DEF_exec_dInst_BITS_63_TO_56___d67;
  tUInt8 DEF_exec_dInst_BITS_109_TO_102___d70;
  tUInt8 DEF_x__h1044;
  tUInt8 DEF_y__h1047;
  tUInt32 DEF_y__h1007;
  tUInt32 DEF_x__h1034;
  tUInt32 DEF_exec_dInst_BITS_71_TO_56___d76;
  tUInt32 DEF_exec_dInst_BITS_117_TO_102___d79;
  PORT_exec_dInst = ARG_exec_dInst;
  PORT_exec_ip = ARG_exec_ip;
  PORT_exec_pc = ARG_exec_pc;
  DEF_exec_dInst_BITS_117_TO_102___d79 = ARG_exec_dInst.get_bits_in_word32(3u, 6u, 16u);
  DEF_exec_dInst_BITS_71_TO_56___d76 = primExtract32(16u, 173u, ARG_exec_dInst, 32u, 71u, 32u, 56u);
  DEF_x__h1034 = ARG_exec_dInst.get_bits_in_word32(1u, 7u, 16u);
  DEF_y__h1047 = ARG_exec_dInst.get_bits_in_word8(4u, 14u, 8u);
  DEF_y__h1007 = primExtract32(16u, 173u, ARG_exec_dInst, 32u, 37u, 32u, 22u);
  DEF_x__h1044 = ARG_exec_dInst.get_bits_in_word8(4u, 6u, 8u);
  DEF_exec_dInst_BITS_109_TO_102___d70 = ARG_exec_dInst.get_bits_in_word8(3u, 6u, 8u);
  DEF_exec_dInst_BITS_164_TO_160___d1 = ARG_exec_dInst.get_bits_in_word8(5u, 0u, 5u);
  DEF_exec_dInst_BITS_63_TO_56___d67 = ARG_exec_dInst.get_bits_in_word8(1u, 24u, 8u);
  DEF_exec_dInst_BITS_81_TO_78___d18 = ARG_exec_dInst.get_bits_in_word8(2u, 14u, 4u);
  DEF_rm__h676 = ARG_exec_dInst.get_bits_in_word8(4u, 24u, 3u);
  DEF_exec_dInst_BIT_154___d31 = ARG_exec_dInst.get_bits_in_word8(4u, 26u, 1u);
  DEF_mod__h675 = ARG_exec_dInst.get_bits_in_word8(4u, 30u, 2u);
  DEF_exec_dInst_BIT_118___d56 = ARG_exec_dInst.get_bits_in_word8(3u, 22u, 1u);
  DEF_exec_dInst_BIT_72___d55 = ARG_exec_dInst.get_bits_in_word8(2u, 8u, 1u);
  DEF_exec_dInst_BIT_82___d9 = ARG_exec_dInst.get_bits_in_word8(2u, 18u, 1u);
  DEF_exec_dInst_BIT_21___d57 = ARG_exec_dInst.get_bits_in_word8(0u, 21u, 1u);
  DEF_exec_dInst_BITS_164_TO_160_EQ_6___d21 = DEF_exec_dInst_BITS_164_TO_160___d1 == (tUInt8)6u;
  switch (DEF_exec_dInst_BITS_164_TO_160___d1) {
  case (tUInt8)6u:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d91 = DEF_exec_dInst_BITS_117_TO_102___d79;
    break;
  default:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d91 = 0u;
  }
  switch (DEF_exec_dInst_BITS_164_TO_160___d1) {
  case (tUInt8)4u:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_THEN_exec_d_ETC___d85 = 65535u & (DEF_exec_dInst_BITS_71_TO_56___d76 + 1u);
    break;
  case (tUInt8)5u:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_THEN_exec_d_ETC___d85 = 65535u & (DEF_exec_dInst_BITS_71_TO_56___d76 - 1u);
    break;
  case (tUInt8)2u:
  case (tUInt8)3u:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_THEN_exec_d_ETC___d85 = DEF_exec_dInst_BITS_117_TO_102___d79;
    break;
  case (tUInt8)10u:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_THEN_exec_d_ETC___d85 = ARG_exec_dInst.get_bits_in_word32(0u,
												     5u,
												     16u);
    break;
  default:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_THEN_exec_d_ETC___d85 = 0u;
  }
  DEF_exec_dInst_BITS_164_TO_160_EQ_10___d10 = DEF_exec_dInst_BITS_164_TO_160___d1 == (tUInt8)10u;
  DEF_x__h1004 = 65535u & (DEF_x__h1034 + DEF_y__h1007);
  switch (DEF_exec_dInst_BITS_164_TO_160___d1) {
  case (tUInt8)4u:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_THEN_exec_d_ETC___d74 = (tUInt8)255u & (DEF_exec_dInst_BITS_63_TO_56___d67 + (tUInt8)170u);
    break;
  case (tUInt8)5u:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_THEN_exec_d_ETC___d74 = (tUInt8)255u & (DEF_exec_dInst_BITS_63_TO_56___d67 - (tUInt8)170u);
    break;
  case (tUInt8)2u:
  case (tUInt8)3u:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_THEN_exec_d_ETC___d74 = DEF_exec_dInst_BITS_109_TO_102___d70;
    break;
  default:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_THEN_exec_d_ETC___d74 = ARG_exec_dInst.get_bits_in_word8(0u,
												    5u,
												    8u);
  }
  DEF_NOT_exec_dInst_BIT_72_5___d61 = !DEF_exec_dInst_BIT_72___d55;
  DEF_NOT_exec_dInst_BIT_82___d13 = !DEF_exec_dInst_BIT_82___d9;
  switch (DEF_exec_dInst_BITS_164_TO_160___d1) {
  case (tUInt8)2u:
  case (tUInt8)3u:
  case (tUInt8)4u:
  case (tUInt8)5u:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d12 = DEF_exec_dInst_BIT_82___d9;
    break;
  default:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d12 = DEF_exec_dInst_BITS_164_TO_160_EQ_10___d10 && DEF_exec_dInst_BIT_82___d9;
  }
  DEF_NOT_exec_dInst_BIT_118_6___d62 = !DEF_exec_dInst_BIT_118___d56;
  switch (DEF_exec_dInst_BITS_164_TO_160___d1) {
  case (tUInt8)4u:
  case (tUInt8)5u:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d66 = DEF_NOT_exec_dInst_BIT_72_5___d61;
    break;
  case (tUInt8)2u:
  case (tUInt8)3u:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d66 = DEF_NOT_exec_dInst_BIT_118_6___d62;
    break;
  default:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d66 = DEF_exec_dInst_BITS_164_TO_160_EQ_10___d10 && !DEF_exec_dInst_BIT_21___d57;
  }
  DEF_NOT_exec_dInst_BITS_164_TO_160_EQ_10_0___d14 = !DEF_exec_dInst_BITS_164_TO_160_EQ_10___d10;
  switch (DEF_exec_dInst_BITS_164_TO_160___d1) {
  case (tUInt8)2u:
  case (tUInt8)3u:
  case (tUInt8)4u:
  case (tUInt8)5u:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d17 = DEF_NOT_exec_dInst_BIT_82___d13;
    break;
  default:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d17 = DEF_NOT_exec_dInst_BITS_164_TO_160_EQ_10_0___d14 || DEF_NOT_exec_dInst_BIT_82___d13;
  }
  switch (DEF_exec_dInst_BITS_164_TO_160___d1) {
  case (tUInt8)4u:
  case (tUInt8)5u:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d60 = DEF_exec_dInst_BIT_72___d55;
    break;
  case (tUInt8)2u:
  case (tUInt8)3u:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d60 = DEF_exec_dInst_BIT_118___d56;
    break;
  default:
    DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d60 = DEF_NOT_exec_dInst_BITS_164_TO_160_EQ_10_0___d14 || DEF_exec_dInst_BIT_21___d57;
  }
  DEF_y__h955 = primSignExt32(16u, 8u, (tUInt8)(DEF_y__h1047));
  DEF_y__h1033 = (tUInt8)255u & ((tUInt8)8u + DEF_y__h1047);
  DEF_y__h1035 = 65535u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_x__h1044));
  DEF_x__h1002 = 65535u & (DEF_x__h1004 + DEF_y__h1035);
  DEF_x__h1032 = 65535u & (DEF_x__h1034 + DEF_y__h1035);
  switch (DEF_mod__h675) {
  case (tUInt8)0u:
    DEF_offset__h663 = DEF_rm__h676 == (tUInt8)6u ? primShiftL32(16u,
								 16u,
								 (tUInt32)(DEF_y__h1035),
								 8u,
								 (tUInt8)(DEF_y__h1033)) : (DEF_exec_dInst_BIT_154___d31 ? DEF_x__h1034 : DEF_x__h1004);
    break;
  case (tUInt8)1u:
    DEF_offset__h663 = DEF_exec_dInst_BIT_154___d31 ? 65535u & (DEF_x__h1034 + DEF_y__h955) : 65535u & (DEF_x__h1004 + DEF_y__h955);
    break;
  default:
    DEF_offset__h663 = DEF_exec_dInst_BIT_154___d31 ? primShiftL32(16u,
								   16u,
								   (tUInt32)(DEF_x__h1032),
								   8u,
								   (tUInt8)(DEF_y__h1033)) : primShiftL32(16u,
													  16u,
													  (tUInt32)(DEF_x__h1002),
													  8u,
													  (tUInt8)(DEF_y__h1033));
  }
  DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d96.set_bits_in_word((tUInt8)31u & ((DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d60 << 4u) | (tUInt8)((DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d66 ? 65535u & ((((tUInt32)((tUInt8)170u)) << 8u) | (tUInt32)(DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_THEN_exec_d_ETC___d74)) : DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_THEN_exec_d_ETC___d85) >> 12u)),
										2u,
										0u,
										5u).set_whole_word((((((tUInt32)(4095u & (DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d66 ? 65535u & ((((tUInt32)((tUInt8)170u)) << 8u) | (tUInt32)(DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_THEN_exec_d_ETC___d74)) : DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_THEN_exec_d_ETC___d85))) << 20u) | (65536u << 3u)) | (((tUInt32)(!DEF_exec_dInst_BITS_164_TO_160_EQ_6___d21 || DEF_exec_dInst_BIT_118___d56)) << 2u)) | (tUInt32)((tUInt8)((DEF_exec_dInst_BITS_164_TO_160_EQ_6___d21 && DEF_NOT_exec_dInst_BIT_118_6___d62 ? DEF_exec_dInst_BITS_117_TO_102___d79 : DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d91) >> 14u)),
												   1u).set_whole_word(((((tUInt32)(16383u & (DEF_exec_dInst_BITS_164_TO_160_EQ_6___d21 && DEF_NOT_exec_dInst_BIT_118_6___d62 ? DEF_exec_dInst_BITS_117_TO_102___d79 : DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d91))) << 18u) | (((tUInt32)((tUInt8)0u)) << 16u)) | (65535u & (ARG_exec_pc + 1u)),
														      0u);
  DEF__0_CONCAT_DONTCARE_CONCAT_IF_exec_dInst_BITS_16_ETC___d97.set_bits_in_word(536870911u & (((((tUInt32)((tUInt8)10u)) << 24u) | ((DEF_exec_dInst_BITS_164_TO_160_EQ_6___d21 ? 524287u & ((((tUInt32)((tUInt8)5u)) << 16u) | DEF_offset__h663) : 174762u) << 5u)) | (tUInt32)(DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d96.get_bits_in_word8(2u,
																																												0u,
																																												5u))),
										 2u,
										 0u,
										 29u).set_whole_word(DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d96.get_whole_word(1u),
												     1u).set_whole_word(DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d96.get_whole_word(0u),
															0u);
  DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d20 = (tUInt8)31u & ((DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d12 << 4u) | (DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d17 ? DEF_exec_dInst_BITS_81_TO_78___d18 : DEF_exec_dInst_BITS_81_TO_78___d18));
  PORT_exec.set_bits_in_word((tUInt8)127u & ((DEF_exec_dInst_BITS_164_TO_160___d1 << 2u) | (tUInt8)(DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d20 >> 3u)),
			     3u,
			     0u,
			     7u).set_whole_word((((tUInt32)((tUInt8)((tUInt8)7u & DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d20))) << 29u) | DEF__0_CONCAT_DONTCARE_CONCAT_IF_exec_dInst_BITS_16_ETC___d97.get_bits_in_word32(2u,
																													     0u,
																													     29u),
						2u).set_whole_word(DEF__0_CONCAT_DONTCARE_CONCAT_IF_exec_dInst_BITS_16_ETC___d97.get_whole_word(1u),
								   1u).set_whole_word(DEF__0_CONCAT_DONTCARE_CONCAT_IF_exec_dInst_BITS_16_ETC___d97.get_whole_word(0u),
										      0u);
  return PORT_exec;
}

tUInt8 MOD_module_exec::METH_RDY_exec()
{
  DEF_CAN_FIRE_exec = (tUInt8)1u;
  PORT_RDY_exec = DEF_CAN_FIRE_exec;
  return PORT_RDY_exec;
}


/* Reset routines */


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */


/* State dumping routine */
void MOD_module_exec::dump_state(unsigned int indent)
{
}


/* VCD dumping routines */

unsigned int MOD_module_exec::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 8u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_exec", 1u);
  vcd_write_def(sim_hdl, num++, "IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d96", 69u);
  vcd_write_def(sim_hdl, num++, "_0_CONCAT_DONTCARE_CONCAT_IF_exec_dInst_BITS_16_ETC___d97", 93u);
  vcd_write_def(sim_hdl, num++, "RDY_exec", 1u);
  vcd_write_def(sim_hdl, num++, "exec", 103u);
  vcd_write_def(sim_hdl, num++, "exec_dInst", 173u);
  vcd_write_def(sim_hdl, num++, "exec_ip", 16u);
  vcd_write_def(sim_hdl, num++, "exec_pc", 16u);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_module_exec::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_module_exec &backing)
{
  vcd_defs(dt, backing);
}

void MOD_module_exec::vcd_defs(tVCDDumpType dt, MOD_module_exec &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 69u);
    vcd_write_x(sim_hdl, num++, 93u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 103u);
    vcd_write_x(sim_hdl, num++, 173u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_exec) != DEF_CAN_FIRE_exec)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_exec, 1u);
	backing.DEF_CAN_FIRE_exec = DEF_CAN_FIRE_exec;
      }
      ++num;
      if ((backing.DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d96) != DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d96)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d96, 69u);
	backing.DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d96 = DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d96;
      }
      ++num;
      if ((backing.DEF__0_CONCAT_DONTCARE_CONCAT_IF_exec_dInst_BITS_16_ETC___d97) != DEF__0_CONCAT_DONTCARE_CONCAT_IF_exec_dInst_BITS_16_ETC___d97)
      {
	vcd_write_val(sim_hdl, num, DEF__0_CONCAT_DONTCARE_CONCAT_IF_exec_dInst_BITS_16_ETC___d97, 93u);
	backing.DEF__0_CONCAT_DONTCARE_CONCAT_IF_exec_dInst_BITS_16_ETC___d97 = DEF__0_CONCAT_DONTCARE_CONCAT_IF_exec_dInst_BITS_16_ETC___d97;
      }
      ++num;
      if ((backing.PORT_RDY_exec) != PORT_RDY_exec)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_exec, 1u);
	backing.PORT_RDY_exec = PORT_RDY_exec;
      }
      ++num;
      if ((backing.PORT_exec) != PORT_exec)
      {
	vcd_write_val(sim_hdl, num, PORT_exec, 103u);
	backing.PORT_exec = PORT_exec;
      }
      ++num;
      if ((backing.PORT_exec_dInst) != PORT_exec_dInst)
      {
	vcd_write_val(sim_hdl, num, PORT_exec_dInst, 173u);
	backing.PORT_exec_dInst = PORT_exec_dInst;
      }
      ++num;
      if ((backing.PORT_exec_ip) != PORT_exec_ip)
      {
	vcd_write_val(sim_hdl, num, PORT_exec_ip, 16u);
	backing.PORT_exec_ip = PORT_exec_ip;
      }
      ++num;
      if ((backing.PORT_exec_pc) != PORT_exec_pc)
      {
	vcd_write_val(sim_hdl, num, PORT_exec_pc, 16u);
	backing.PORT_exec_pc = PORT_exec_pc;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_exec, 1u);
      backing.DEF_CAN_FIRE_exec = DEF_CAN_FIRE_exec;
      vcd_write_val(sim_hdl, num++, DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d96, 69u);
      backing.DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d96 = DEF_IF_exec_dInst_BITS_164_TO_160_EQ_4_OR_exec_dIn_ETC___d96;
      vcd_write_val(sim_hdl, num++, DEF__0_CONCAT_DONTCARE_CONCAT_IF_exec_dInst_BITS_16_ETC___d97, 93u);
      backing.DEF__0_CONCAT_DONTCARE_CONCAT_IF_exec_dInst_BITS_16_ETC___d97 = DEF__0_CONCAT_DONTCARE_CONCAT_IF_exec_dInst_BITS_16_ETC___d97;
      vcd_write_val(sim_hdl, num++, PORT_RDY_exec, 1u);
      backing.PORT_RDY_exec = PORT_RDY_exec;
      vcd_write_val(sim_hdl, num++, PORT_exec, 103u);
      backing.PORT_exec = PORT_exec;
      vcd_write_val(sim_hdl, num++, PORT_exec_dInst, 173u);
      backing.PORT_exec_dInst = PORT_exec_dInst;
      vcd_write_val(sim_hdl, num++, PORT_exec_ip, 16u);
      backing.PORT_exec_ip = PORT_exec_ip;
      vcd_write_val(sim_hdl, num++, PORT_exec_pc, 16u);
      backing.PORT_exec_pc = PORT_exec_pc;
    }
}
